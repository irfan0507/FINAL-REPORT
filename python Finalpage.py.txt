from abc import ABC, abstractmethod
import math

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

    @abstractmethod
    def perimeter(self):
        pass

    @classmethod
    @abstractmethod
    def shape_type(cls):
        pass

    @property
    @abstractmethod
    def dimensions(self):
        pass

class Rectangle(Shape):
    def __init__(self, width, height):
        self._width = width
        self._height = height

    def area(self):
        return self._width * self._height

    def perimeter(self):
        return 2 * (self._width + self._height)

    @classmethod
    def shape_type(cls):
        return "Rectangle"

    @property
    def dimensions(self):
        return (self._width, self._height)

class Circle(Shape):
    def __init__(self, radius):
        self._radius = radius

    def area(self):
        return math.pi * (self._radius ** 2)

    def perimeter(self):
        return 2 * math.pi * self._radius

    @classmethod
    def shape_type(cls):
        return "Circle"

    @property
    def dimensions(self):
        return (self._radius,)
shapes = [Rectangle(4, 5), Circle(3)]

for shape in shapes:
    print(f'Shape: {shape.shape_type()}, Area: {shape.area()}, Perimeter: {shape.perimeter()}, Dimensions: {shape.dimensions}')
